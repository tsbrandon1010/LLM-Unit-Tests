{
  "id": "chatcmpl-83a4zpUk64C0jhhZ61yY2guujgsYO",
  "object": "chat.completion",
  "created": 1695864365,
  "model": "gpt-3.5-turbo-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "import math\nimport unittest\n\ndef is_prime(num: int) -> bool:\n    '''Check if a number (num) is prime or not.'''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nclass TestIsPrime(unittest.TestCase):\n    def test_is_prime(self):\n        # Test case where num is prime\n        self.assertEqual(is_prime(2), True)\n        self.assertEqual(is_prime(3), True)\n        self.assertEqual(is_prime(5), True)\n        self.assertEqual(is_prime(7), True)\n        self.assertEqual(is_prime(11), True)\n        \n        # Test case where num is not prime\n        self.assertEqual(is_prime(1), False)\n        self.assertEqual(is_prime(4), False)\n        self.assertEqual(is_prime(6), False)\n        self.assertEqual(is_prime(8), False)\n        self.assertEqual(is_prime(9), False)\n        self.assertEqual(is_prime(10), False)\n        \n        # Test case where num is negative\n        self.assertEqual(is_prime(-2), False)\n        self.assertEqual(is_prime(-3), False)\n        self.assertEqual(is_prime(-5), False)\n        self.assertEqual(is_prime(-7), False)\n        self.assertEqual(is_prime(-11), False)\n        \n        # Test case where num is 0 or 1\n        self.assertEqual(is_prime(0), False)\n        self.assertEqual(is_prime(1), False)\n\nif __name__ == '__main__':\n    unittest.main()"
      },
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 105,
    "completion_tokens": 325,
    "total_tokens": 430
  }
}